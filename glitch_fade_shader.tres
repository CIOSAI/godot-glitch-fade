[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "distort"

[sub_resource type="VisualShaderNodeScalarOp" id=21]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=22]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeBooleanUniform" id=24]
uniform_name = "horizontal"

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "uv"

[sub_resource type="VisualShaderNodeSwitch" id=29]

[sub_resource type="VisualShaderNodeVectorCompose" id=30]

[sub_resource type="VisualShaderNodeExpression" id=31]
size = Vector2( 314, 290 )
expression = "if(flip) output = vec3(0., st.y, 0.);
else output = vec3(st.x, 0., 0.);"

[sub_resource type="VisualShaderNodeExpression" id=32]
size = Vector2( 220.064, 259.062 )
expression = "y = pow(x, 1./abs(modifier)-1.)"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=4]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[sub_resource type="VisualShaderNodeTextureUniform" id=9]
uniform_name = "Noise"
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[resource]
code = "shader_type canvas_item;
uniform bool horizontal;
uniform sampler2D Noise : hint_albedo;
uniform float distort;



void vertex() {
// Output:0

}

void fragment() {
// Input:22
	vec3 n_out22p0 = vec3(UV, 0.0);

// BooleanUniform:20
	bool n_out20p0 = horizontal;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Expression:27
	vec3 n_out27p0;
	n_out27p0 = vec3(0.0, 0.0, 0.0);
	{
		if(n_out20p0) n_out27p0 = vec3(0., n_out2p0.y, 0.);
		else n_out27p0 = vec3(n_out2p0.x, 0., 0.);
	}

// Texture:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		vec4 Noise_tex_read = texture(Noise, n_out27p0.xy);
		n_out8p0 = Noise_tex_read.rgb;
		n_out8p1 = Noise_tex_read.a;
	}

// VectorDecompose:9
	float n_out9p0 = n_out8p0.x;
	float n_out9p1 = n_out8p0.y;
	float n_out9p2 = n_out8p0.z;

// ScalarUniform:14
	float n_out14p0 = distort;

// Expression:28
	float n_out28p0;
	n_out28p0 = 0.0;
	{
		n_out28p0 = pow(n_out9p0, 1./abs(n_out14p0)-1.)
	}

// ScalarFunc:18
	float n_out18p0 = sign(n_out14p0);

// ScalarOp:17
	float n_out17p0 = n_out28p0 * n_out18p0;

// VectorCompose:6
	float n_in6p1 = 0.00000;
	float n_in6p2 = 0.00000;
	vec3 n_out6p0 = vec3(n_out17p0, n_in6p1, n_in6p2);

// VectorCompose:26
	float n_in26p0 = 0.00000;
	float n_in26p2 = 0.00000;
	vec3 n_out26p0 = vec3(n_in26p0, n_out17p0, n_in26p2);

// VectorSwitch:25
	vec3 n_out25p0;
	if(n_out20p0)
	{
		n_out25p0 = n_out6p0;
	}
	else
	{
		n_out25p0 = n_out26p0;
	}

// VectorOp:5
	vec3 n_out5p0 = n_out22p0 + n_out25p0;

// Input:3

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out5p0.xy);
		n_out4p0 = TEXTURE_tex_read.rgb;
		n_out4p1 = TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1918.06, 228.333 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1580, 440 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -1640, 600 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 1380, 600 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 1380, 440 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( 1160, 440 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( 660, 580 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -880, 700 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -860, 540 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -640, 540 )
nodes/fragment/14/node = SubResource( 18 )
nodes/fragment/14/position = Vector2( -600, 820 )
nodes/fragment/17/node = SubResource( 21 )
nodes/fragment/17/position = Vector2( 420, 740 )
nodes/fragment/18/node = SubResource( 22 )
nodes/fragment/18/position = Vector2( 200, 800 )
nodes/fragment/20/node = SubResource( 24 )
nodes/fragment/20/position = Vector2( -1680, 420 )
nodes/fragment/22/node = SubResource( 26 )
nodes/fragment/22/position = Vector2( 1180, 360 )
nodes/fragment/25/node = SubResource( 29 )
nodes/fragment/25/position = Vector2( 920, 440 )
nodes/fragment/26/node = SubResource( 30 )
nodes/fragment/26/position = Vector2( 640, 760 )
nodes/fragment/27/node = SubResource( 31 )
nodes/fragment/27/position = Vector2( -1440, 520 )
nodes/fragment/27/size = Vector2( 314, 290 )
nodes/fragment/27/input_ports = "0,2,flip;1,1,st;"
nodes/fragment/27/output_ports = "0,1,output;"
nodes/fragment/27/expression = "if(flip) output = vec3(0., st.y, 0.);
else output = vec3(st.x, 0., 0.);"
nodes/fragment/28/node = SubResource( 32 )
nodes/fragment/28/position = Vector2( -380, 600 )
nodes/fragment/28/size = Vector2( 220.064, 259.062 )
nodes/fragment/28/input_ports = "0,0,x;1,0,modifier;"
nodes/fragment/28/output_ports = "0,0,y;"
nodes/fragment/28/expression = "y = pow(x, 1./abs(modifier)-1.)"
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 4, 1, 0, 1, 3, 0, 4, 2, 5, 0, 4, 0, 7, 2, 8, 2, 8, 0, 9, 0, 17, 0, 6, 0, 14, 0, 18, 0, 18, 0, 17, 1, 22, 0, 5, 0, 20, 0, 25, 0, 6, 0, 25, 1, 25, 0, 5, 1, 17, 0, 26, 1, 26, 0, 25, 2, 2, 0, 27, 1, 20, 0, 27, 0, 27, 0, 8, 0, 14, 0, 28, 1, 9, 0, 28, 0, 28, 0, 17, 0 )
